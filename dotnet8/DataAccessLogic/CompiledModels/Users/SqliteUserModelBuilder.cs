// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CompiledModels.Users
{
    public partial class SqliteUserModel
    {
        partial void Initialize()
        {
            var account = AccountEntityType.Create(this);
            var category = CategoryEntityType.Create(this);

            AccountEntityType.CreateForeignKey1(account, category);

            AccountEntityType.CreateAnnotations(account);
            CategoryEntityType.CreateAnnotations(category);

            AddAnnotation("ProductVersion", "8.0.3");
            AddAnnotation("Relational:DefaultSchema", "user");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var account = FindEntityType("Web.Api.DAL.Account")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            account.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var webApiDALAccountTableBase = new TableBase("Web.Api.DAL.Account", null, relationalModel);
            var categoryIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoryId", "INTEGER", webApiDALAccountTableBase)
            {
                IsNullable = true
            };
            webApiDALAccountTableBase.Columns.Add("CategoryId", categoryIdColumnBase);
            var doBColumnBase = new ColumnBase<ColumnMappingBase>("DoB", "TEXT", webApiDALAccountTableBase);
            webApiDALAccountTableBase.Columns.Add("DoB", doBColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "TEXT", webApiDALAccountTableBase);
            webApiDALAccountTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALAccountTableBase);
            webApiDALAccountTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", webApiDALAccountTableBase);
            webApiDALAccountTableBase.Columns.Add("Name", nameColumnBase);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "TEXT", webApiDALAccountTableBase);
            webApiDALAccountTableBase.Columns.Add("Password", passwordColumnBase);
            var phoneColumnBase = new ColumnBase<ColumnMappingBase>("Phone", "TEXT", webApiDALAccountTableBase);
            webApiDALAccountTableBase.Columns.Add("Phone", phoneColumnBase);
            relationalModel.DefaultTables.Add("Web.Api.DAL.Account", webApiDALAccountTableBase);
            var webApiDALAccountMappingBase = new TableMappingBase<ColumnMappingBase>(account, webApiDALAccountTableBase, true);
            webApiDALAccountTableBase.AddTypeMapping(webApiDALAccountMappingBase, false);
            defaultTableMappings.Add(webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, account.FindProperty("Id")!, webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase, account.FindProperty("CategoryId")!, webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doBColumnBase, account.FindProperty("DoB")!, webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, account.FindProperty("Email")!, webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, account.FindProperty("Name")!, webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, account.FindProperty("Password")!, webApiDALAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneColumnBase, account.FindProperty("Phone")!, webApiDALAccountMappingBase);

            var tableMappings = new List<TableMapping>();
            account.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var accountTable = new Table("Account", "user", relationalModel);
            var idColumn = new Column("Id", "INTEGER", accountTable);
            accountTable.Columns.Add("Id", idColumn);
            var categoryIdColumn = new Column("CategoryId", "INTEGER", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("CategoryId", categoryIdColumn);
            var doBColumn = new Column("DoB", "TEXT", accountTable);
            accountTable.Columns.Add("DoB", doBColumn);
            var emailColumn = new Column("Email", "TEXT", accountTable);
            accountTable.Columns.Add("Email", emailColumn);
            var nameColumn = new Column("Name", "TEXT", accountTable);
            accountTable.Columns.Add("Name", nameColumn);
            var passwordColumn = new Column("Password", "TEXT", accountTable);
            accountTable.Columns.Add("Password", passwordColumn);
            var phoneColumn = new Column("Phone", "TEXT", accountTable);
            accountTable.Columns.Add("Phone", phoneColumn);
            var pK_Account = new UniqueConstraint("PK_Account", accountTable, new[] { idColumn });
            accountTable.PrimaryKey = pK_Account;
            var pK_AccountUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.Account",
                new[] { "Id" });
            pK_Account.MappedKeys.Add(pK_AccountUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AccountUc).Add(pK_Account);
            accountTable.UniqueConstraints.Add("PK_Account", pK_Account);
            var iX_Account_CategoryId = new TableIndex(
            "IX_Account_CategoryId", accountTable, new[] { categoryIdColumn }, false);
            var iX_Account_CategoryIdIx = RelationalModel.GetIndex(this,
                "Web.Api.DAL.Account",
                new[] { "CategoryId" });
            iX_Account_CategoryId.MappedIndexes.Add(iX_Account_CategoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Account_CategoryIdIx).Add(iX_Account_CategoryId);
            accountTable.Indexes.Add("IX_Account_CategoryId", iX_Account_CategoryId);
            relationalModel.Tables.Add(("Account", "user"), accountTable);
            var accountTableMapping = new TableMapping(account, accountTable, true);
            accountTable.AddTypeMapping(accountTableMapping, false);
            tableMappings.Add(accountTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, account.FindProperty("Id")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn, account.FindProperty("CategoryId")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(doBColumn, account.FindProperty("DoB")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, account.FindProperty("Email")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, account.FindProperty("Name")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, account.FindProperty("Password")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(phoneColumn, account.FindProperty("Phone")!, accountTableMapping);

            var category = FindEntityType("Web.Api.DAL.Category")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var webApiDALCategoryTableBase = new TableBase("Web.Api.DAL.Category", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALCategoryTableBase);
            webApiDALCategoryTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", webApiDALCategoryTableBase);
            webApiDALCategoryTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("Web.Api.DAL.Category", webApiDALCategoryTableBase);
            var webApiDALCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, webApiDALCategoryTableBase, true);
            webApiDALCategoryTableBase.AddTypeMapping(webApiDALCategoryMappingBase, false);
            defaultTableMappings0.Add(webApiDALCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, category.FindProperty("Id")!, webApiDALCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, category.FindProperty("Name")!, webApiDALCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var categoryTable = new Table("Category", "user", relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", categoryTable);
            categoryTable.Columns.Add("Id", idColumn0);
            var nameColumn0 = new Column("Name", "TEXT", categoryTable);
            categoryTable.Columns.Add("Name", nameColumn0);
            var pK_Category = new UniqueConstraint("PK_Category", categoryTable, new[] { idColumn0 });
            categoryTable.PrimaryKey = pK_Category;
            var pK_CategoryUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.Category",
                new[] { "Id" });
            pK_Category.MappedKeys.Add(pK_CategoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoryUc).Add(pK_Category);
            categoryTable.UniqueConstraints.Add("PK_Category", pK_Category);
            relationalModel.Tables.Add(("Category", "user"), categoryTable);
            var categoryTableMapping = new TableMapping(category, categoryTable, true);
            categoryTable.AddTypeMapping(categoryTableMapping, false);
            tableMappings0.Add(categoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, category.FindProperty("Id")!, categoryTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, category.FindProperty("Name")!, categoryTableMapping);
            var fK_Account_Category_CategoryId = new ForeignKeyConstraint(
                "FK_Account_Category_CategoryId", accountTable, categoryTable,
                new[] { categoryIdColumn },
                categoryTable.FindUniqueConstraint("PK_Category")!, ReferentialAction.NoAction);
            var fK_Account_Category_CategoryIdFk = RelationalModel.GetForeignKey(this,
                "Web.Api.DAL.Account",
                new[] { "CategoryId" },
                "Web.Api.DAL.Category",
                new[] { "Id" });
            fK_Account_Category_CategoryId.MappedForeignKeys.Add(fK_Account_Category_CategoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Account_Category_CategoryIdFk).Add(fK_Account_Category_CategoryId);
            accountTable.ForeignKeyConstraints.Add(fK_Account_Category_CategoryId);
            categoryTable.ReferencingForeignKeyConstraints.Add(fK_Account_Category_CategoryId);
            return relationalModel.MakeReadOnly();
        }
    }
}
