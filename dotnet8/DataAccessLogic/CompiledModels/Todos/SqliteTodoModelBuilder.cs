// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CompiledModels.Todos
{
    public partial class SqliteTodoModel
    {
        partial void Initialize()
        {
            var goal = GoalEntityType.Create(this);
            var tAction = TActionEntityType.Create(this);
            var tActivity = TActivityEntityType.Create(this);
            var todo = TodoEntityType.Create(this);
            var userAssign = UserAssignEntityType.Create(this);

            TActionEntityType.CreateForeignKey1(tAction, goal);
            TActivityEntityType.CreateForeignKey1(tActivity, tAction);
            TodoEntityType.CreateForeignKey1(todo, tAction);

            GoalEntityType.CreateAnnotations(goal);
            TActionEntityType.CreateAnnotations(tAction);
            TActivityEntityType.CreateAnnotations(tActivity);
            TodoEntityType.CreateAnnotations(todo);
            UserAssignEntityType.CreateAnnotations(userAssign);

            AddAnnotation("ProductVersion", "8.0.3");
            AddAnnotation("Relational:DefaultSchema", "todo");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var goal = FindEntityType("Web.Api.DAL.Goal")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            goal.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var webApiDALGoalTableBase = new TableBase("Web.Api.DAL.Goal", null, relationalModel);
            var endColumnBase = new ColumnBase<ColumnMappingBase>("End", "TEXT", webApiDALGoalTableBase)
            {
                IsNullable = true
            };
            webApiDALGoalTableBase.Columns.Add("End", endColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALGoalTableBase);
            webApiDALGoalTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", webApiDALGoalTableBase);
            webApiDALGoalTableBase.Columns.Add("Name", nameColumnBase);
            var startColumnBase = new ColumnBase<ColumnMappingBase>("Start", "TEXT", webApiDALGoalTableBase)
            {
                IsNullable = true
            };
            webApiDALGoalTableBase.Columns.Add("Start", startColumnBase);
            relationalModel.DefaultTables.Add("Web.Api.DAL.Goal", webApiDALGoalTableBase);
            var webApiDALGoalMappingBase = new TableMappingBase<ColumnMappingBase>(goal, webApiDALGoalTableBase, true);
            webApiDALGoalTableBase.AddTypeMapping(webApiDALGoalMappingBase, false);
            defaultTableMappings.Add(webApiDALGoalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, goal.FindProperty("Id")!, webApiDALGoalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endColumnBase, goal.FindProperty("End")!, webApiDALGoalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, goal.FindProperty("Name")!, webApiDALGoalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startColumnBase, goal.FindProperty("Start")!, webApiDALGoalMappingBase);

            var tableMappings = new List<TableMapping>();
            goal.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var goalTable = new Table("Goal", "todo", relationalModel);
            var idColumn = new Column("Id", "INTEGER", goalTable);
            goalTable.Columns.Add("Id", idColumn);
            var endColumn = new Column("End", "TEXT", goalTable)
            {
                IsNullable = true
            };
            goalTable.Columns.Add("End", endColumn);
            var nameColumn = new Column("Name", "TEXT", goalTable);
            goalTable.Columns.Add("Name", nameColumn);
            var startColumn = new Column("Start", "TEXT", goalTable)
            {
                IsNullable = true
            };
            goalTable.Columns.Add("Start", startColumn);
            var pK_Goal = new UniqueConstraint("PK_Goal", goalTable, new[] { idColumn });
            goalTable.PrimaryKey = pK_Goal;
            var pK_GoalUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.Goal",
                new[] { "Id" });
            pK_Goal.MappedKeys.Add(pK_GoalUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GoalUc).Add(pK_Goal);
            goalTable.UniqueConstraints.Add("PK_Goal", pK_Goal);
            relationalModel.Tables.Add(("Goal", "todo"), goalTable);
            var goalTableMapping = new TableMapping(goal, goalTable, true);
            goalTable.AddTypeMapping(goalTableMapping, false);
            tableMappings.Add(goalTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, goal.FindProperty("Id")!, goalTableMapping);
            RelationalModel.CreateColumnMapping(endColumn, goal.FindProperty("End")!, goalTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, goal.FindProperty("Name")!, goalTableMapping);
            RelationalModel.CreateColumnMapping(startColumn, goal.FindProperty("Start")!, goalTableMapping);

            var tAction = FindEntityType("Web.Api.DAL.TAction")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            tAction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var webApiDALTActionTableBase = new TableBase("Web.Api.DAL.TAction", null, relationalModel);
            var endColumnBase0 = new ColumnBase<ColumnMappingBase>("End", "TEXT", webApiDALTActionTableBase)
            {
                IsNullable = true
            };
            webApiDALTActionTableBase.Columns.Add("End", endColumnBase0);
            var goalIdColumnBase = new ColumnBase<ColumnMappingBase>("GoalId", "INTEGER", webApiDALTActionTableBase);
            webApiDALTActionTableBase.Columns.Add("GoalId", goalIdColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALTActionTableBase);
            webApiDALTActionTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", webApiDALTActionTableBase);
            webApiDALTActionTableBase.Columns.Add("Name", nameColumnBase0);
            var startColumnBase0 = new ColumnBase<ColumnMappingBase>("Start", "TEXT", webApiDALTActionTableBase)
            {
                IsNullable = true
            };
            webApiDALTActionTableBase.Columns.Add("Start", startColumnBase0);
            relationalModel.DefaultTables.Add("Web.Api.DAL.TAction", webApiDALTActionTableBase);
            var webApiDALTActionMappingBase = new TableMappingBase<ColumnMappingBase>(tAction, webApiDALTActionTableBase, true);
            webApiDALTActionTableBase.AddTypeMapping(webApiDALTActionMappingBase, false);
            defaultTableMappings0.Add(webApiDALTActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, tAction.FindProperty("Id")!, webApiDALTActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endColumnBase0, tAction.FindProperty("End")!, webApiDALTActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)goalIdColumnBase, tAction.FindProperty("GoalId")!, webApiDALTActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, tAction.FindProperty("Name")!, webApiDALTActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startColumnBase0, tAction.FindProperty("Start")!, webApiDALTActionMappingBase);

            var tableMappings0 = new List<TableMapping>();
            tAction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var actionTable = new Table("Action", "todo", relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", actionTable);
            actionTable.Columns.Add("Id", idColumn0);
            var endColumn0 = new Column("End", "TEXT", actionTable)
            {
                IsNullable = true
            };
            actionTable.Columns.Add("End", endColumn0);
            var goalIdColumn = new Column("GoalId", "INTEGER", actionTable);
            actionTable.Columns.Add("GoalId", goalIdColumn);
            var nameColumn0 = new Column("Name", "TEXT", actionTable);
            actionTable.Columns.Add("Name", nameColumn0);
            var startColumn0 = new Column("Start", "TEXT", actionTable)
            {
                IsNullable = true
            };
            actionTable.Columns.Add("Start", startColumn0);
            var pK_Action = new UniqueConstraint("PK_Action", actionTable, new[] { idColumn0 });
            actionTable.PrimaryKey = pK_Action;
            var pK_ActionUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.TAction",
                new[] { "Id" });
            pK_Action.MappedKeys.Add(pK_ActionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ActionUc).Add(pK_Action);
            actionTable.UniqueConstraints.Add("PK_Action", pK_Action);
            var iX_Action_GoalId = new TableIndex(
            "IX_Action_GoalId", actionTable, new[] { goalIdColumn }, false);
            var iX_Action_GoalIdIx = RelationalModel.GetIndex(this,
                "Web.Api.DAL.TAction",
                new[] { "GoalId" });
            iX_Action_GoalId.MappedIndexes.Add(iX_Action_GoalIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Action_GoalIdIx).Add(iX_Action_GoalId);
            actionTable.Indexes.Add("IX_Action_GoalId", iX_Action_GoalId);
            relationalModel.Tables.Add(("Action", "todo"), actionTable);
            var actionTableMapping = new TableMapping(tAction, actionTable, true);
            actionTable.AddTypeMapping(actionTableMapping, false);
            tableMappings0.Add(actionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, tAction.FindProperty("Id")!, actionTableMapping);
            RelationalModel.CreateColumnMapping(endColumn0, tAction.FindProperty("End")!, actionTableMapping);
            RelationalModel.CreateColumnMapping(goalIdColumn, tAction.FindProperty("GoalId")!, actionTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, tAction.FindProperty("Name")!, actionTableMapping);
            RelationalModel.CreateColumnMapping(startColumn0, tAction.FindProperty("Start")!, actionTableMapping);

            var tActivity = FindEntityType("Web.Api.DAL.TActivity")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            tActivity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var webApiDALTActivityTableBase = new TableBase("Web.Api.DAL.TActivity", null, relationalModel);
            var actionIdColumnBase = new ColumnBase<ColumnMappingBase>("ActionId", "INTEGER", webApiDALTActivityTableBase);
            webApiDALTActivityTableBase.Columns.Add("ActionId", actionIdColumnBase);
            var endColumnBase1 = new ColumnBase<ColumnMappingBase>("End", "TEXT", webApiDALTActivityTableBase)
            {
                IsNullable = true
            };
            webApiDALTActivityTableBase.Columns.Add("End", endColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALTActivityTableBase);
            webApiDALTActivityTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", webApiDALTActivityTableBase);
            webApiDALTActivityTableBase.Columns.Add("Name", nameColumnBase1);
            var startColumnBase1 = new ColumnBase<ColumnMappingBase>("Start", "TEXT", webApiDALTActivityTableBase)
            {
                IsNullable = true
            };
            webApiDALTActivityTableBase.Columns.Add("Start", startColumnBase1);
            relationalModel.DefaultTables.Add("Web.Api.DAL.TActivity", webApiDALTActivityTableBase);
            var webApiDALTActivityMappingBase = new TableMappingBase<ColumnMappingBase>(tActivity, webApiDALTActivityTableBase, true);
            webApiDALTActivityTableBase.AddTypeMapping(webApiDALTActivityMappingBase, false);
            defaultTableMappings1.Add(webApiDALTActivityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, tActivity.FindProperty("Id")!, webApiDALTActivityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actionIdColumnBase, tActivity.FindProperty("ActionId")!, webApiDALTActivityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endColumnBase1, tActivity.FindProperty("End")!, webApiDALTActivityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, tActivity.FindProperty("Name")!, webApiDALTActivityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startColumnBase1, tActivity.FindProperty("Start")!, webApiDALTActivityMappingBase);

            var tableMappings1 = new List<TableMapping>();
            tActivity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var activityTable = new Table("Activity", "todo", relationalModel);
            var idColumn1 = new Column("Id", "INTEGER", activityTable);
            activityTable.Columns.Add("Id", idColumn1);
            var actionIdColumn = new Column("ActionId", "INTEGER", activityTable);
            activityTable.Columns.Add("ActionId", actionIdColumn);
            var endColumn1 = new Column("End", "TEXT", activityTable)
            {
                IsNullable = true
            };
            activityTable.Columns.Add("End", endColumn1);
            var nameColumn1 = new Column("Name", "TEXT", activityTable);
            activityTable.Columns.Add("Name", nameColumn1);
            var startColumn1 = new Column("Start", "TEXT", activityTable)
            {
                IsNullable = true
            };
            activityTable.Columns.Add("Start", startColumn1);
            var pK_Activity = new UniqueConstraint("PK_Activity", activityTable, new[] { idColumn1 });
            activityTable.PrimaryKey = pK_Activity;
            var pK_ActivityUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.TActivity",
                new[] { "Id" });
            pK_Activity.MappedKeys.Add(pK_ActivityUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ActivityUc).Add(pK_Activity);
            activityTable.UniqueConstraints.Add("PK_Activity", pK_Activity);
            var iX_Activity_ActionId = new TableIndex(
            "IX_Activity_ActionId", activityTable, new[] { actionIdColumn }, false);
            var iX_Activity_ActionIdIx = RelationalModel.GetIndex(this,
                "Web.Api.DAL.TActivity",
                new[] { "ActionId" });
            iX_Activity_ActionId.MappedIndexes.Add(iX_Activity_ActionIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Activity_ActionIdIx).Add(iX_Activity_ActionId);
            activityTable.Indexes.Add("IX_Activity_ActionId", iX_Activity_ActionId);
            relationalModel.Tables.Add(("Activity", "todo"), activityTable);
            var activityTableMapping = new TableMapping(tActivity, activityTable, true);
            activityTable.AddTypeMapping(activityTableMapping, false);
            tableMappings1.Add(activityTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, tActivity.FindProperty("Id")!, activityTableMapping);
            RelationalModel.CreateColumnMapping(actionIdColumn, tActivity.FindProperty("ActionId")!, activityTableMapping);
            RelationalModel.CreateColumnMapping(endColumn1, tActivity.FindProperty("End")!, activityTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, tActivity.FindProperty("Name")!, activityTableMapping);
            RelationalModel.CreateColumnMapping(startColumn1, tActivity.FindProperty("Start")!, activityTableMapping);

            var todo = FindEntityType("Web.Api.DAL.Todo")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            todo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var webApiDALTodoTableBase = new TableBase("Web.Api.DAL.Todo", null, relationalModel);
            var actionIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ActionId", "INTEGER", webApiDALTodoTableBase);
            webApiDALTodoTableBase.Columns.Add("ActionId", actionIdColumnBase0);
            var endColumnBase2 = new ColumnBase<ColumnMappingBase>("End", "TEXT", webApiDALTodoTableBase)
            {
                IsNullable = true
            };
            webApiDALTodoTableBase.Columns.Add("End", endColumnBase2);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALTodoTableBase);
            webApiDALTodoTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", webApiDALTodoTableBase);
            webApiDALTodoTableBase.Columns.Add("Name", nameColumnBase2);
            var startColumnBase2 = new ColumnBase<ColumnMappingBase>("Start", "TEXT", webApiDALTodoTableBase)
            {
                IsNullable = true
            };
            webApiDALTodoTableBase.Columns.Add("Start", startColumnBase2);
            relationalModel.DefaultTables.Add("Web.Api.DAL.Todo", webApiDALTodoTableBase);
            var webApiDALTodoMappingBase = new TableMappingBase<ColumnMappingBase>(todo, webApiDALTodoTableBase, true);
            webApiDALTodoTableBase.AddTypeMapping(webApiDALTodoMappingBase, false);
            defaultTableMappings2.Add(webApiDALTodoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, todo.FindProperty("Id")!, webApiDALTodoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actionIdColumnBase0, todo.FindProperty("ActionId")!, webApiDALTodoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endColumnBase2, todo.FindProperty("End")!, webApiDALTodoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, todo.FindProperty("Name")!, webApiDALTodoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startColumnBase2, todo.FindProperty("Start")!, webApiDALTodoMappingBase);

            var tableMappings2 = new List<TableMapping>();
            todo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var todoTable = new Table("Todo", "todo", relationalModel);
            var idColumn2 = new Column("Id", "INTEGER", todoTable);
            todoTable.Columns.Add("Id", idColumn2);
            var actionIdColumn0 = new Column("ActionId", "INTEGER", todoTable);
            todoTable.Columns.Add("ActionId", actionIdColumn0);
            var endColumn2 = new Column("End", "TEXT", todoTable)
            {
                IsNullable = true
            };
            todoTable.Columns.Add("End", endColumn2);
            var nameColumn2 = new Column("Name", "TEXT", todoTable);
            todoTable.Columns.Add("Name", nameColumn2);
            var startColumn2 = new Column("Start", "TEXT", todoTable)
            {
                IsNullable = true
            };
            todoTable.Columns.Add("Start", startColumn2);
            var pK_Todo = new UniqueConstraint("PK_Todo", todoTable, new[] { idColumn2 });
            todoTable.PrimaryKey = pK_Todo;
            var pK_TodoUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.Todo",
                new[] { "Id" });
            pK_Todo.MappedKeys.Add(pK_TodoUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TodoUc).Add(pK_Todo);
            todoTable.UniqueConstraints.Add("PK_Todo", pK_Todo);
            var iX_Todo_ActionId = new TableIndex(
            "IX_Todo_ActionId", todoTable, new[] { actionIdColumn0 }, false);
            var iX_Todo_ActionIdIx = RelationalModel.GetIndex(this,
                "Web.Api.DAL.Todo",
                new[] { "ActionId" });
            iX_Todo_ActionId.MappedIndexes.Add(iX_Todo_ActionIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Todo_ActionIdIx).Add(iX_Todo_ActionId);
            todoTable.Indexes.Add("IX_Todo_ActionId", iX_Todo_ActionId);
            relationalModel.Tables.Add(("Todo", "todo"), todoTable);
            var todoTableMapping = new TableMapping(todo, todoTable, true);
            todoTable.AddTypeMapping(todoTableMapping, false);
            tableMappings2.Add(todoTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, todo.FindProperty("Id")!, todoTableMapping);
            RelationalModel.CreateColumnMapping(actionIdColumn0, todo.FindProperty("ActionId")!, todoTableMapping);
            RelationalModel.CreateColumnMapping(endColumn2, todo.FindProperty("End")!, todoTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, todo.FindProperty("Name")!, todoTableMapping);
            RelationalModel.CreateColumnMapping(startColumn2, todo.FindProperty("Start")!, todoTableMapping);

            var userAssign = FindEntityType("Web.Api.DAL.UserAssign")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            userAssign.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var webApiDALUserAssignTableBase = new TableBase("Web.Api.DAL.UserAssign", null, relationalModel);
            var accountIdColumnBase = new ColumnBase<ColumnMappingBase>("AccountId", "INTEGER", webApiDALUserAssignTableBase);
            webApiDALUserAssignTableBase.Columns.Add("AccountId", accountIdColumnBase);
            var actionIdsColumnBase = new ColumnBase<ColumnMappingBase>("ActionIds", "TEXT", webApiDALUserAssignTableBase);
            webApiDALUserAssignTableBase.Columns.Add("ActionIds", actionIdsColumnBase);
            var goalIdsColumnBase = new ColumnBase<ColumnMappingBase>("GoalIds", "TEXT", webApiDALUserAssignTableBase);
            webApiDALUserAssignTableBase.Columns.Add("GoalIds", goalIdsColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", webApiDALUserAssignTableBase);
            webApiDALUserAssignTableBase.Columns.Add("Id", idColumnBase3);
            relationalModel.DefaultTables.Add("Web.Api.DAL.UserAssign", webApiDALUserAssignTableBase);
            var webApiDALUserAssignMappingBase = new TableMappingBase<ColumnMappingBase>(userAssign, webApiDALUserAssignTableBase, true);
            webApiDALUserAssignTableBase.AddTypeMapping(webApiDALUserAssignMappingBase, false);
            defaultTableMappings3.Add(webApiDALUserAssignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, userAssign.FindProperty("Id")!, webApiDALUserAssignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accountIdColumnBase, userAssign.FindProperty("AccountId")!, webApiDALUserAssignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actionIdsColumnBase, userAssign.FindProperty("ActionIds")!, webApiDALUserAssignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)goalIdsColumnBase, userAssign.FindProperty("GoalIds")!, webApiDALUserAssignMappingBase);

            var tableMappings3 = new List<TableMapping>();
            userAssign.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var userAssignTable = new Table("UserAssign", "todo", relationalModel);
            var idColumn3 = new Column("Id", "INTEGER", userAssignTable);
            userAssignTable.Columns.Add("Id", idColumn3);
            var accountIdColumn = new Column("AccountId", "INTEGER", userAssignTable);
            userAssignTable.Columns.Add("AccountId", accountIdColumn);
            var actionIdsColumn = new Column("ActionIds", "TEXT", userAssignTable);
            userAssignTable.Columns.Add("ActionIds", actionIdsColumn);
            var goalIdsColumn = new Column("GoalIds", "TEXT", userAssignTable);
            userAssignTable.Columns.Add("GoalIds", goalIdsColumn);
            var pK_UserAssign = new UniqueConstraint("PK_UserAssign", userAssignTable, new[] { idColumn3 });
            userAssignTable.PrimaryKey = pK_UserAssign;
            var pK_UserAssignUc = RelationalModel.GetKey(this,
                "Web.Api.DAL.UserAssign",
                new[] { "Id" });
            pK_UserAssign.MappedKeys.Add(pK_UserAssignUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserAssignUc).Add(pK_UserAssign);
            userAssignTable.UniqueConstraints.Add("PK_UserAssign", pK_UserAssign);
            relationalModel.Tables.Add(("UserAssign", "todo"), userAssignTable);
            var userAssignTableMapping = new TableMapping(userAssign, userAssignTable, true);
            userAssignTable.AddTypeMapping(userAssignTableMapping, false);
            tableMappings3.Add(userAssignTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, userAssign.FindProperty("Id")!, userAssignTableMapping);
            RelationalModel.CreateColumnMapping(accountIdColumn, userAssign.FindProperty("AccountId")!, userAssignTableMapping);
            RelationalModel.CreateColumnMapping(actionIdsColumn, userAssign.FindProperty("ActionIds")!, userAssignTableMapping);
            RelationalModel.CreateColumnMapping(goalIdsColumn, userAssign.FindProperty("GoalIds")!, userAssignTableMapping);
            var fK_Action_Goal_GoalId = new ForeignKeyConstraint(
                "FK_Action_Goal_GoalId", actionTable, goalTable,
                new[] { goalIdColumn },
                goalTable.FindUniqueConstraint("PK_Goal")!, ReferentialAction.Cascade);
            var fK_Action_Goal_GoalIdFk = RelationalModel.GetForeignKey(this,
                "Web.Api.DAL.TAction",
                new[] { "GoalId" },
                "Web.Api.DAL.Goal",
                new[] { "Id" });
            fK_Action_Goal_GoalId.MappedForeignKeys.Add(fK_Action_Goal_GoalIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Action_Goal_GoalIdFk).Add(fK_Action_Goal_GoalId);
            actionTable.ForeignKeyConstraints.Add(fK_Action_Goal_GoalId);
            goalTable.ReferencingForeignKeyConstraints.Add(fK_Action_Goal_GoalId);
            var fK_Activity_Action_ActionId = new ForeignKeyConstraint(
                "FK_Activity_Action_ActionId", activityTable, actionTable,
                new[] { actionIdColumn },
                actionTable.FindUniqueConstraint("PK_Action")!, ReferentialAction.Cascade);
            var fK_Activity_Action_ActionIdFk = RelationalModel.GetForeignKey(this,
                "Web.Api.DAL.TActivity",
                new[] { "ActionId" },
                "Web.Api.DAL.TAction",
                new[] { "Id" });
            fK_Activity_Action_ActionId.MappedForeignKeys.Add(fK_Activity_Action_ActionIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Activity_Action_ActionIdFk).Add(fK_Activity_Action_ActionId);
            activityTable.ForeignKeyConstraints.Add(fK_Activity_Action_ActionId);
            actionTable.ReferencingForeignKeyConstraints.Add(fK_Activity_Action_ActionId);
            var fK_Todo_Action_ActionId = new ForeignKeyConstraint(
                "FK_Todo_Action_ActionId", todoTable, actionTable,
                new[] { actionIdColumn0 },
                actionTable.FindUniqueConstraint("PK_Action")!, ReferentialAction.Cascade);
            var fK_Todo_Action_ActionIdFk = RelationalModel.GetForeignKey(this,
                "Web.Api.DAL.Todo",
                new[] { "ActionId" },
                "Web.Api.DAL.TAction",
                new[] { "Id" });
            fK_Todo_Action_ActionId.MappedForeignKeys.Add(fK_Todo_Action_ActionIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Todo_Action_ActionIdFk).Add(fK_Todo_Action_ActionId);
            todoTable.ForeignKeyConstraints.Add(fK_Todo_Action_ActionId);
            actionTable.ReferencingForeignKeyConstraints.Add(fK_Todo_Action_ActionId);
            return relationalModel.MakeReadOnly();
        }
    }
}
